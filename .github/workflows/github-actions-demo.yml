name: Build and Create Installer

on:
  push:
    branches:
      - main
    tags:
      - "v*"
      
env:
  PROJECT_PATH: Dev_ToolBox/Dev_ToolBox.csproj

jobs:
  deploy:
    runs-on: windows-latest
    permissions:
        id-token: write
        contents: read
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup .NET  
      - name: Setup .NET Core SDK 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      # Restore NuGet packages
      - name: Restore
        run: dotnet restore ${{ env.PROJECT_PATH }}

      # Build the application
      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true --no-build

      - name: Log Current Working Directory
        run: |
          echo "Current working directory: $(pwd)"
      
      - name: Verify build output
        run: |
          if (!(Test-Path D:\a\Dev_ToolBox\Dev_ToolBox\Dev_ToolBox\bin\Release\net8.0-windows10.0.19041.0\win-x64\publish)) {
            echo "Build output directory does not exist."
            exit 1
          } else {
            echo "Build output directory exists."
            Get-ChildItem -Path D:\a\Dev_ToolBox\Dev_ToolBox\Dev_ToolBox\bin\Release\net8.0-windows10.0.19041.0\win-x64\publish -Recurse
          }

      # Install Inno Setup
      - name: Install Inno Setup
        run: |
          Invoke-WebRequest -Uri https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          Start-Process -Wait -FilePath .\is.exe -ArgumentList '/VERYSILENT', '/DIR="C:\InnoSetup"'

      # Create Installer
      - name: Create Installer
        run: |
          Start-Process -FilePath "C:\InnoSetup\ISCC.exe" -ArgumentList "Dev_toolBox/setup.iss" -Wait
        env:
          PATH: ${{ runner.temp }};C:\InnoSetup

      - name: Verify installer output
        run: |
          if (!(Test-Path ./bin/Release/Installer)) {
            echo "Installer directory does not exist."
            exit 1
          } else {
            echo "Installer directory exists."
            Get-ChildItem -Path ./bin/Release/Installer -Recurse
          }

      - name: Log Full Workspace Directory
        run: |
          echo "Listing full workspace directory from $(pwd):"
          Get-ChildItem -Recurse

      - name: Version as date
        id: get_version
        run: echo "{name}=version::$(Get-Date -Format 'yyyy.MM.dd')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOOL_TOKEN }}
        with:
          tag_name: tag
          release_name: Release
          draft: false
          prerelease: false
  
      - name: Upload Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOOL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "bin/Release/Installer/Dev_ToolBox_Setup.exe"
          asset_name: "Dev_ToolBox_Setup.exe"
          asset_content_type: application/vnd.microsoft.portable-executable

      # - name: Zip
      #   run: Compress-Archive -Path ./Dev_ToolBox/bin/Release -DestinationPath ./Dev_ToolBox.zip
      #   shell: powershell

      # - name: Version as date
      #   id: get_version
      #   run: echo "::set-output name=version::$(Get-Date -Format 'yyyy.MM.dd')"

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.DEV_TOOL_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.get_version.outputs.version }}
      #     release_name: Release ${{ steps.get_version.outputs.version }}
      #     draft: false
      #     prerelease: false

      # - name: Add asset
      #   uses: AButler/upload-release-assets@v3.0
      #   with:
      #    files: ./Dev_ToolBox.zip
      #    repo-token: ${{ secrets.DEV_TOOL_TOKEN }}
      #    release-tag: ${{ steps.get_version.outputs.version }}
